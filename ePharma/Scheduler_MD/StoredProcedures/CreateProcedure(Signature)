tig:drop-stored-procedure("pedigreeLevelSignature"),
tig:create-stored-procedure("pedigreeLevelSignature","

declare namespace bin = 'http://www.rainingdata.com/TigerLogic/binary-support';
declare character-encoding 'UTF-8';

declare variable $EnvelopeId as string external;
declare variable $pedId as string external;

declare variable $keyFile as xs:string := 'C:/security/keys/SW_keystore';
declare variable $keyPwd as xs:string  := 'jasmine';
declare variable $keyAlias as xs:string := 'RDTAAlias';

declare function local:to-string($node as node()* ) as string
{
  bin:as-string(binary{$node},'UTF-8')
};

declare function local:to-node($str as xs:string ) as node()* 
{ bin:parse( binary{$str},'text/xml') treat as node()*
}; 

declare function local:createSignature($doc as node(),$local_key_file as xs:string,
	$local_keyPwd as xs:string, $local_keyAlias as xs:string ) as node()* {
 let $xmlStr := local:to-string($doc) 
 let $signedDoc := local:signNode($xmlStr, $local_key_file, $local_keyPwd , $local_keyAlias,'')
 return local:to-node( substring($signedDoc,39) ) treat as node()*
};
 
update
 for $pedigree in collection('tig:///ePharma_MD/ShippedPedigree')/*:pedigreeEnvelope[*:serialNumber =  $EnvelopeId 
	and *:pedigree/*:shippedPedigree/*:documentInfo/*:serialNumber = $pedId]/*:pedigree

 let $pedigree_sign  := <test>{local:createSignature($pedigree,$keyFile,$keyPwd,$keyAlias)}</test>
(: where not( exists($pedigree/*:Signature) ):)
replace  $pedigree/*:Signature  with  $pedigree_sign/*:pedigree/*:Signature[2]

 
"),

tig:drop-stored-procedure("CreateSignatureToEnvelope_MD"),
tig:create-stored-procedure("CreateSignatureToEnvelope_MD","
declare xmlspace preserve;

import module namespace util = 'xquery:modules:util';
import module namespace xmlf = 'xquery:modules:xml';
declare namespace bin = 'http://www.rainingdata.com/TigerLogic/binary-support';

declare variable $EnvelopeId as string external; 

declare variable $keyFile as xs:string {'C:/security/keys/SW_keystore'}; 
declare variable $keyPwd as xs:string {'md1841'}; 
declare variable $keyAlias as xs:string {'MDAlias'}; 

declare function local:createSignature($doc as node(),$local_key_file as xs:string,
	 $local_keyPwd as xs:string, $local_keyAlias as xs:string,$signURI as xs:string,
	 $signId as xs:string) as node(){ 

	let $signedDoc := local:signPedigreeNode($doc, $local_key_file, $local_keyPwd , $local_keyAlias, $signURI, $signId) 
	return 
		(:xmlf:parse(bin:as-string(binary{$signedDoc},'UTF-8')):)
		$signedDoc
}; 

(: Make this generic, right now using it for signing shippedPedigree node :)
update
for $pedigree in collection('tig:///ePharma_MD/ShippedPedigree')/*:pedigreeEnvelope[*:serialNumber = $EnvelopeId ]/*:pedigree
let $pedNode := document{<pedigree xmlns=""urn:epcGlobal:Pedigree:xsd:1"">{$pedigree/*:shippedPedigree}</pedigree>}
let $pedigree_sign := local:createSignature($pedNode,
					$keyFile,$keyPwd,$keyAlias,
					concat('#',$pedigree/*:shippedPedigree/@id),
					concat('_',util:create-uuid()))
replace $pedigree with $pedigree_sign/*:pedigree
")

