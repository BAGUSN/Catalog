List of Procedures

Create RuleSet.XML
declare general-option 'experimental=true';
tig:create-stored-procedure("RuleEngine1",
"
declare variable $RuleSetName as string external;
for $b in collection('tig:///CardinalHealth/RuleSet')/RuleSet
where $b/Name = $RuleSetName
return 
	for $c in $b/Rules/Rule
	where $c/Links/FromLink = 'String'
	return $c/Result/TrueAction

")



tig:drop-stored-procedure("RuleEngine1")


tlsp:RuleEngine1('InitTesting')



Transient XML 

Status Check 

declare general-option 'experimental=true';
tig:create-stored-procedure("StatusCheck",
"
declare variable $payload as node()* external;
let $c := $payload
return 
if ($c/*/Status = 'Checked') then
	$c/*
else 
'false'

")


tlsp:StatusCheck(<po><id>3</id><Status>Checked</Status></po>)


Status Update

declare general-option 'experimental=true';
tig:create-stored-procedure("StatusUpdate",
"
declare variable $payload as node()* external;
let $c := $payload
return 
if ($c/*/id = 3) then
	$c/*
else 
'false'
")


tlsp:StatusUpdate(<po><id>3</id><Status>Checked</Status></po>)



Get All TrueActions from RuleSet

(: Get all Rules from RuleSet :)

declare variable $RuleSetName as string external;
for $b in collection('tig:///CardinalHealth/RuleSet')/RuleSet
where $b/Name =$RuleSetName
return data($b/Rules/Rule/Result/TrueAction)

(:Create Instance of Rule :)

declare variable $id as string external;
for $b in collection('tig:///CardinalHealth/RuleSet')/RuleSet
where $b/ID = $id
return
let $instance-uri := tig:insert-document('tig:///CardinalHealth/Instances', $b)
return $instance-uri

(: Generate Mx ID for Instance :)
let $d := fn:max(
for $i in collection('tig:///CardinalHealth/Instances/')/RuleSet
return $i/ID +1 )
return $d


tig:///CardinalHealth/Instances/1373541051
(: Generate update Instance ID)

declare variable $maxID as string external;
declare variable $document-uri as string external;
replace value of doc(concat('tig:///CardinalHealth/Instances/',$document-uri))/RuleSet/ID with $maxID


(: Attaching Payload to Instance of Rule :)


declare variable $instanceID as string external;
declare variable $payload as string external;
insert $payload into collection('tig:///CardinalHealth/Instances')/RuleSet[ID=$ instanceID]/Context




(: Stored Procedure :) -8/-7




tig:create-stored-procedure(“createInstance”,”
declare variable $id as string external; for $b in collection('tig:///CardinalHealth/RuleSet')/RuleSet where $b/ID = $id return let $instance-uri := tig:insert-document('tig:///CardinalHealth/Instances', $b) return $instance-uri “)

tig:create-stored-procedure(“getMax”,”
fn:max(for $i in collection('tig:///CardinalHealth/Instances')/RuleSet return xs:int($i/InstanceID + 1))

tig:create-stored-procedure("attachPayload","
declare variable $payload as string external; declare variable $instanceID as string external; insert $payload into collection('tig:///CardinalHealth/Instances')/RuleSet[InstanceID=$instanceID]/Context
“)

replace value of doc(concat('tig:///CardinalHealth/Instances/',$document-uri))/RuleSet/ID with $maxID }






tig:create-stored-procedure("GetRules","
declare variable $RuleSetName as string external;
for $b in collection('tig:///CardinalHealth/Instances')/RuleSet
where $b/InstanceID =$RuleSetName
return data($b/Rules/Rule/Result/TrueAction)
")
