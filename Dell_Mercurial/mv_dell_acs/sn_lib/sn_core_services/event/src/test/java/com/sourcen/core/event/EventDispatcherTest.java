/*
 * Copyright(C) 2011, Sourcen Framework and the original authors.
 * All Rights Reserved. Use is subject to license terms and conditions.
 */

package com.sourcen.core.event;

import junit.framework.TestCase;
import org.junit.Test;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.concurrent.atomic.AtomicInteger;

/**
 * @author Navin Raj Kumar G.S.
 * @author $LastChangedBy: navinr $
 * @version $Revision: 2769 $, $Date:: 2012-05-30 02:50:05#$
 */
public class EventDispatcherTest extends TestCase {

    private static final Logger log = LoggerFactory.getLogger(EventDispatcherTest.class);

    @Test
    public void testDispatcher() throws Exception {
        EventDispatcher.getInstance().addListener(MyListener.class);
        EventDispatcher.getInstance().addListener(new MyListener("custom-object-1"));
        SimpleEvent event;
        event = new SimpleEvent("SIMPLE_EVENT");
//        EventDispatcher.dispatchSynchronized(event);
        EventDispatcher.dispatch(event);
        // sleep the thread to just test if we are dispatching asynchronously
        Thread.sleep(3000L);
    }


    @Test
    public void testDispatchAsynchronousEvents() throws Exception {

        EventDispatcher.getInstance().addListener(new MyListener("custom-object-1"));
        EventDispatcher.getInstance().addListener(new MyListener("custom-object-2"));
        EventDispatcher.getInstance().addListener(new MyListener("custom-object-3"));
        EventDispatcher.getInstance().addListener(new MyListener("custom-object-4"));
        EventDispatcher.getInstance().addListener(new MyListener("custom-object-5"));
        EventDispatcher.getInstance().addListener(new MyListener("custom-object-6"));
        EventDispatcher.getInstance().addListener(new MyListener("custom-object-7"));
        EventDispatcher.getInstance().addListener(new MyListener("custom-object-8"));
        EventDispatcher.getInstance().addListener(new MyListener("custom-object-9"));
        EventDispatcher.getInstance().addListener(new MyListener("custom-object-10"));
        log.info("DISPATCHING ASYNCHRONOUS");
        SimpleEvent asyncEvent = new SimpleEvent("ASYNCHRONOUS_EVENT_TEST");
        // just randomly set the prop1, since the event is shared SimpleEvent must be threadSafe.
        asyncEvent.setProperty("prop1", new AtomicInteger(0));
        log.info("Sleeping for 3 seconds, but the dispatch must happen.");
        EventDispatcher.dispatchAsynchronous(asyncEvent);
        // sleep the thread to just test if we are dispatching asynchronously
        Thread.sleep(3000L);
        log.info("Done sleeping");
    }

    @Test
    public void testDispatchSynchronousEvents() throws Exception {

        EventDispatcher.getInstance().addListener(new MyListener("custom-object-1"));
        EventDispatcher.getInstance().addListener(new MyListener("custom-object-2"));
        EventDispatcher.getInstance().addListener(new MyListener("custom-object-3"));
        EventDispatcher.getInstance().addListener(new MyListener("custom-object-4"));
        EventDispatcher.getInstance().addListener(new MyListener("custom-object-5"));
        EventDispatcher.getInstance().addListener(new MyListener("custom-object-6"));
        EventDispatcher.getInstance().addListener(new MyListener("custom-object-7"));
        EventDispatcher.getInstance().addListener(new MyListener("custom-object-8"));
        EventDispatcher.getInstance().addListener(new MyListener("custom-object-9"));
        EventDispatcher.getInstance().addListener(new MyListener("custom-object-10"));
        log.info("DISPATCHING ASYNCHRONOUS");
        SimpleEvent event = new SimpleEvent("ASYNCHRONOUS_EVENT_TEST");
        event.setProperty("prop1", new AtomicInteger(0));
        EventDispatcher.dispatch(event);
        log.info("Sleeping for 3 seconds, but the events must execute in order and then sleep.");
        Thread.sleep(3000L);
        log.info("Done sleeping");
    }

    public static final class MyListener {

        private String autogen = "autogenerated";

        public MyListener() {
        }

        public MyListener(String autogen) {
            this.autogen = autogen;
        }

        public void onSimpleEvent(Event<?> event) {
            log.info("received event:=" + event.getType() + " classId:=" + autogen);
        }


        public void onAsynchronousEventTest(Event<?> event) {
            AtomicInteger prop1 = (AtomicInteger) event.getProperty("prop1");
            prop1.getAndIncrement();
            log.info("received event:=" + event.getType() + " classId:=" + autogen + "\t prop1:=" + prop1 + ", sync:=" + event.getProperty("sync"));

            try {
                Thread.sleep(1000);
            } catch (Exception e) {
                e.printStackTrace();
            }
        }

        public void onSynchronousEventTest(Event<?> event) {
            Integer prop1 = (Integer) event.getProperty("prop1");
            if ((Boolean) event.getProperty("sync")) {
                prop1++;
            }
            event.getProperties().put("prop1", prop1);
            log.info("received event:=" + event.getType() + " classId:=" + autogen + "\t\t prop1:=" + prop1 + ", sync:=" + event.getProperty("sync"));

            try {
                Thread.sleep(1000);
            } catch (Exception e) {
                e.printStackTrace();
            }
        }

    }

}
